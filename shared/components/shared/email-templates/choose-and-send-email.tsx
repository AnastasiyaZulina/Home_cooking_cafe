import { Prisma } from "@prisma/client";
import React from "react";
import { EmailOrderTemplate } from "./email-order-template";
import { sendEmail } from "@/shared/lib";
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import timezone from "dayjs/plugin/timezone";
import { CHECKOUT_CONSTANTS } from "@/shared/constants";

dayjs.extend(utc);
dayjs.extend(timezone);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
const formatDeliveryTime = (date: Date | string) => {
  const dateString = typeof date === 'string' ? date : date.toISOString();
  const start = dayjs(dateString).tz('Asia/Novosibirsk');
  const end = start.add(CHECKOUT_CONSTANTS.WORKING_HOURS.TIME_SLOT_DURATION, 'minute');
  
  return {
    timeRange: `${start.format('HH:mm')}-${end.format('HH:mm')}`,
    date: start.format('DD.MM.YYYY')
  };
};

export async function chooseAndSendEmail(
  order: Prisma.OrderGetPayload<{ include: { items: true } }>,
  totalAmount: number,
  paymentUrl?: string,
) {
  const {
    items,
    deliveryType,
    deliveryCost,
    deliveryTime,
    bonusDelta,
    address,
    id,
    email,
    paymentMethod,
    status,
  } = order;

  const totalPrice = totalAmount + (deliveryCost || 0);

  // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ HTML —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
  const itemsHtml = items
    .map((item) => {
      const itemTotal = item.productPrice * item.productQuantity;
      return `<li style="margin-bottom: 10px;">
        ${item.productName} | ${item.productPrice}‚ÇΩ x ${item.productQuantity} —à—Ç. = ${itemTotal}‚ÇΩ
      </li>`;
    })
    .join("");

  // –ë–∞–∑–æ–≤—ã–π HTML —à–∞–±–ª–æ–Ω
  const OrderListHTML = `
    <div style="font-family: Arial, sans-serif; color: #333;">
      <h2 style="color: #1a365d; border-bottom: 2px solid #e2e8f0; padding-bottom: 10px;">
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ #${id}
      </h2>
      <h3 style="color: #2d3748;">–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:</h3>
      <ul style="list-style: none; padding-left: 0;">${itemsHtml}</ul>
      <p style="font-size: 16px;">–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤: ${totalAmount}‚ÇΩ</p>
      ${
        deliveryType === "DELIVERY"
          ? `
            <div style="background: #f7fafc; padding: 15px; border-radius: 8px; margin: 15px 0;">
              <p>üöö –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: ${deliveryCost}‚ÇΩ</p>
              <p>üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ${address}</p>
              <p>‚è∞ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: ${formatDeliveryTime(deliveryTime).timeRange} 
              </p>
            </div>
          `
          : `
            <div style="background: #f7fafc; padding: 15px; border-radius: 8px; margin: 15px 0;">
              <p>üè™ –í—Ä–µ–º—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞: ${formatDeliveryTime(deliveryTime).timeRange} 
              </p>
            </div>
          `
      }
      ${
        bonusDelta > 0
          ? `<p style="color: #38a169;">üéâ –ù–∞—á–∏—Å–ª–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: ${bonusDelta}‚ÇΩ</p>`
          : ""
      }
      ${
        bonusDelta < 0
          ? `<p style="color: #e53e3e;">üîª –°–ø–∏—Å–∞–Ω–æ –±–æ–Ω—É—Å–æ–≤: ${Math.abs(bonusDelta)}‚ÇΩ</p>`
          : ""
      }
      <p style="font-size: 18px; font-weight: bold; color: #1a365d;">
        üí∞ –ò—Ç–æ–≥–æ: ${totalPrice}‚ÇΩ
      </p></hr>
            <p style="font-size: 12px;">
            ${formatDeliveryTime(deliveryTime).date}
      </p>
    </div>
  `;

  const caseKey = `${deliveryType}:${paymentMethod}:${status}`;

  try {
    switch (caseKey) {
      case "DELIVERY:ONLINE:PENDING":
      case "PICKUP:ONLINE:PENDING":
        await sendEmail(
          email,
          `–°–∫–∞—Ç–µ—Ä—Ç—å-—Å–∞–º–æ–±—Ä–∞–Ω–∫–∞ | –ó–∞–∫–∞–∑ #${id}: –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã`,
          <EmailOrderTemplate
            content={`${OrderListHTML}`}
            paymentUrl={paymentUrl}
          />
        );
        break;

      case "DELIVERY:ONLINE:SUCCEEDED":
      case "PICKUP:ONLINE:SUCCEEDED":
        await sendEmail(
          email,
          `–°–∫–∞—Ç–µ—Ä—Ç—å-—Å–∞–º–æ–±—Ä–∞–Ω–∫–∞ | –ó–∞–∫–∞–∑ #${id}: —É—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞`,
          <EmailOrderTemplate
            content={`<p style="color: #38a169; font-weight: bold; font-size: 18px;">‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</p>
            <p style="font-size: 16px;">–°–æ–±–∏—Ä–∞–µ–º –≤–∞—à –∑–∞–∫–∞–∑.</p>${OrderListHTML}`}
          />
        );
        break;

      case "DELIVERY:ONLINE:DELIVERY":
        await sendEmail(
          email,
          `–°–∫–∞—Ç–µ—Ä—Ç—å-—Å–∞–º–æ–±—Ä–∞–Ω–∫–∞ | –ó–∞–∫–∞–∑ #${id}: –≤ –ø—É—Ç–∏`,
          <EmailOrderTemplate
            content={`<p style="font-size: 16px;">
              üöö –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ${address}.<br/>
              ‚è∞ –û–∂–∏–¥–∞–π—Ç–µ –≤ ${formatDeliveryTime(deliveryTime).timeRange}.
            </p>${OrderListHTML}`}
          />
        );
        break;

      case "PICKUP:OFFLINE:READY":
      case "PICKUP:ONLINE:READY":
        await sendEmail(
          email,
          `–°–∫–∞—Ç–µ—Ä—Ç—å-—Å–∞–º–æ–±—Ä–∞–Ω–∫–∞ | –ó–∞–∫–∞–∑ #${id}: –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ`,
          <EmailOrderTemplate
            content={`<p style="font-size: 16px;">
              üéâ –ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ —Å–∞–º–æ–≤—ã–≤–æ–∑—É –≤ ${deliveryTime}.
            </p>${OrderListHTML}`}
          />
        );
        break;

      case "PICKUP:OFFLINE:PENDING":
        await sendEmail(
          email,
          `–°–∫–∞—Ç–µ—Ä—Ç—å-—Å–∞–º–æ–±—Ä–∞–Ω–∫–∞ | –ó–∞–∫–∞–∑ #${id}: –ø—Ä–∏–Ω—è—Ç`,
          <EmailOrderTemplate
            content={`<p style="font-size: 16px;">
              üë®üç≥ –°–æ–±–µ—Ä—ë–º –í–∞—à –∑–∞–∫–∞–∑ –∫ ${deliveryTime}.
            </p>${OrderListHTML}`}
          />
        );
        break;

      case "DELIVERY:ONLINE:COMPLETED":
      case "PICKUP:ONLINE:COMPLETED":
      case "PICKUP:OFFLINE:COMPLETED":
        await sendEmail(
          email,
          `–°–∫–∞—Ç–µ—Ä—Ç—å-—Å–∞–º–æ–±—Ä–∞–Ω–∫–∞ | –ó–∞–∫–∞–∑ #${id}: –≤—ã–ø–æ–ª–Ω–µ–Ω`,
          <EmailOrderTemplate
            content={`<p style="font-size: 16px; color: #38a169;">
              üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ñ–¥–µ–º –≤–∞—Å —Å–Ω–æ–≤–∞.
            </p>${OrderListHTML}`}
          />
        );
        break;

      case "DELIVERY:ONLINE:CANCELLED":
      case "PICKUP:ONLINE:CANCELLED":
      case "PICKUP:OFFLINE:CANCELLED":
        await sendEmail(
          email,
          `–°–∫–∞—Ç–µ—Ä—Ç—å-—Å–∞–º–æ–±—Ä–∞–Ω–∫–∞ | –ó–∞–∫–∞–∑ #${id}: –æ—Ç–º–µ–Ω–µ–Ω`,
          <EmailOrderTemplate
            content={`<p style="color: #e53e3e; font-size: 16px;">
              ‚ùå –í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.
            </p>${OrderListHTML}`}
          />
        );
        break;

      default:
        console.error("Unknown case combination:", caseKey);
        throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–∫–∞–∑–∞: ${caseKey}`);
    }
  } catch (err) {
    console.error("Email sending failed:", err);
    throw new Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email");
  }
}