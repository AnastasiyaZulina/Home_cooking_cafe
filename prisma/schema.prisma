generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id       Int    @id @default(autoincrement())

  name String
  email    String @unique
  password String
  verified DateTime?
  bonusBalance Int @default(0)

  role             UserRole          @default(USER)
  orders           Order[]
  cart             Cart?
  verificationCode VerificationCode?
  feedbacks        Feedback[]

  provider   String?
  providerId String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model Product {
  id       Int    @id @default(autoincrement())
  name     String
  image String
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
  description String?
  price     Int
  weight    Int   @default(0)
  eValue    Int   @default(0)
  isAvailable Boolean @default(true)
  stockQuantity Int @default(0)
  cartItems CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id Int @id @default(autoincrement())

  userId Int?  @unique
  user   User? @relation(fields: [userId], references: [id])

  token String

  totalAmount Int @default(0)

  items CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id Int @id @default(autoincrement())

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  cartId Int
  cart   Cart @relation(fields: [cartId], references: [id])

  quantity    Int   @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id Int @id @default(autoincrement())

  userId Int?
  user   User? @relation(fields: [userId], references: [id])

  items Json
  token String

  status      OrderStatus @default(PENDING)
  totalAmount Int
  paymentId   String?
  paymentMethod PaymentMethod @default(ONLINE)
  
  bonusDelta  Int       @default(0)

  deliveryType   DeliveryType @default(DELIVERY)
  deliveryTime   DateTime
  deliveryCost   Int?

  name String
  address  String?
  email    String
  phone    String
  comment  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationCode {
  id Int @id @default(autoincrement())

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  code String

  createdAt DateTime @default(now())
  @@unique([userId, code])
}

model Feedback {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  feedbackText String
  feedbackStatus FeedbackStatus @default(PENDING)
  isVisible    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum FeedbackStatus {
  PENDING
  APPROVED
  REJECTED
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  READY
  DELIVERY
  CANCELLED
  COMPLETED
}

enum UserRole {
  USER
  ADMIN
}

enum DeliveryType {
  PICKUP
  DELIVERY
}

enum PaymentMethod {
  ONLINE
  OFFLINE
}